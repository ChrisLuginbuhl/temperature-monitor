name: Particle Event Collector

on:
  schedule:
    # Run every 10 minutes - adjust as needed
    - cron: '*/10 * * * *'
  # Allow manual triggering for testing
  workflow_dispatch:

jobs:
  collect-particle-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install axios googleapis
        
    - name: Collect Particle Events and Update Google Sheets
      env:
        PARTICLE_ACCESS_TOKEN: ${{ secrets.PARTICLE_ACCESS_TOKEN }}
        GOOGLE_SHEETS_CREDENTIALS: ${{ secrets.GOOGLE_SHEETS_CREDENTIALS }}
        SPREADSHEET_ID: ${{ secrets.SPREADSHEET_ID }}
        SHEET_NAME: ${{ secrets.SHEET_NAME }}
        DEVICE_ID: ${{ secrets.DEVICE_ID }}
        EVENT_NAME: ${{ secrets.EVENT_NAME }}
      run: |
        cat > collect-data.js << 'EOF'
        const axios = require('axios');
        const { google } = require('googleapis');
        const fs = require('fs');

        async function main() {
          try {
            console.log('Starting Particle event collection...');
            
            // Configuration from environment variables
            const config = {
              particleToken: process.env.PARTICLE_ACCESS_TOKEN,
              spreadsheetId: process.env.SPREADSHEET_ID,
              sheetName: process.env.SHEET_NAME || 'Sheet1',
              deviceId: process.env.DEVICE_ID,
              eventName: process.env.EVENT_NAME
            };

            // Validate required environment variables
            const required = ['particleToken', 'spreadsheetId', 'deviceId', 'eventName'];
            for (const key of required) {
              if (!config[key]) {
                throw new Error(`Missing required environment variable: ${key.toUpperCase()}`);
              }
            }

            // Get current time and 15 minutes ago (buffer for polling interval)
            const now = new Date();
            const fifteenMinutesAgo = new Date(now.getTime() - 15 * 60 * 1000);
            
            console.log(`Fetching events from ${fifteenMinutesAgo.toISOString()} to ${now.toISOString()}`);

            // Fetch events from Particle API (using the more reliable endpoint)
            const eventsUrl = config.deviceId 
              ? `https://api.particle.io/v1/devices/${config.deviceId}/events/${config.eventName}`
              : `https://api.particle.io/v1/devices/events/${config.eventName}`;
            
            console.log(`Fetching from: ${eventsUrl}`);
            
            const eventsResponse = await axios.get(eventsUrl, {
              headers: {
                'Authorization': `Bearer ${config.particleToken}`,
                'Accept': 'application/json'
              },
              timeout: 15000,
              validateStatus: function (status) {
                return status < 500; // Accept 4xx errors but not 5xx
              }
            });

            console.log(`Received ${eventsResponse.data.length || 0} total events`);
            
            // Debug: Show all events found
            if (eventsResponse.data && Array.isArray(eventsResponse.data)) {
              console.log('All events found:');
              eventsResponse.data.forEach((event, index) => {
                console.log(`  Event ${index + 1}: name="${event.name}", time="${event.published_at}", data="${event.data}"`);
              });
            }

            // Filter events by name and time
            let relevantEvents = [];
            if (eventsResponse.data && Array.isArray(eventsResponse.data)) {
              relevantEvents = eventsResponse.data.filter(event => {
                console.log(`Checking event: name="${event.name}" vs expected="${config.eventName}"`);
                if (event.name !== config.eventName) {
                  console.log(`  -> Skipped: name mismatch`);
                  return false;
                }
                
                const eventTime = new Date(event.published_at);
                console.log(`  -> Event time: ${eventTime.toISOString()}, Window: ${fifteenMinutesAgo.toISOString()} to ${now.toISOString()}`);
                const inTimeWindow = eventTime >= fifteenMinutesAgo && eventTime <= now;
                console.log(`  -> In time window: ${inTimeWindow}`);
                return inTimeWindow;
              });
            }

            console.log(`Found ${relevantEvents.length} relevant events for '${config.eventName}'`);

            if (relevantEvents.length === 0) {
              console.log('No new events to process');
              return;
            }

            // Set up Google Sheets API
            const credentials = JSON.parse(process.env.GOOGLE_SHEETS_CREDENTIALS);
            const auth = new google.auth.GoogleAuth({
              credentials: credentials,
              scopes: ['https://www.googleapis.com/auth/spreadsheets']
            });

            const sheets = google.sheets({ version: 'v4', auth });

            // Prepare data for Google Sheets
            const rows = relevantEvents.map(event => [
              event.published_at,
              event.name,
              event.data || '',
              event.device_id || config.deviceId,
              event.ttl || '',
              new Date().toISOString() // Processing timestamp
            ]);

            // Check if sheet has headers, add them if not
            try {
              const headerCheck = await sheets.spreadsheets.values.get({
                spreadsheetId: config.spreadsheetId,
                range: `${config.sheetName}!A1:F1`
              });

              if (!headerCheck.data.values || headerCheck.data.values.length === 0) {
                console.log('Adding headers to sheet');
                await sheets.spreadsheets.values.append({
                  spreadsheetId: config.spreadsheetId,
                  range: config.sheetName,
                  valueInputOption: 'RAW',
                  resource: {
                    values: [['Published At', 'Event Name', 'Data', 'Device ID', 'TTL', 'Processed At']]
                  }
                });
              }
            } catch (error) {
              console.log('Could not check/add headers, continuing anyway:', error.message);
            }

            // Append new data to Google Sheets
            const appendResult = await sheets.spreadsheets.values.append({
              spreadsheetId: config.spreadsheetId,
              range: config.sheetName,
              valueInputOption: 'RAW',
              resource: {
                values: rows
              }
            });

            console.log(`Successfully added ${rows.length} rows to Google Sheets`);
            console.log(`Updated range: ${appendResult.data.updates.updatedRange}`);

            // Log the events for debugging
            relevantEvents.forEach((event, index) => {
              console.log(`Event ${index + 1}: ${event.published_at} - ${event.data}`);
            });

          } catch (error) {
            console.error('Error in main function:', error);
            
            if (error.response) {
              console.error('Response status:', error.response.status);
              console.error('Response data:', error.response.data);
            }
            
            process.exit(1);
          }
        }

        main();
        EOF
        
        node collect-data.js
