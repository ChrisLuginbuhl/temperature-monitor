name: Particle Variable Collector

on:
  schedule:
    # Run every 10 minutes - adjust as needed
    - cron: '*/10 * * * *'
  # Allow manual triggering for testing
  workflow_dispatch:

jobs:
  collect-particle-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install axios googleapis
        
    - name: Collect Particle Variable and Update Google Sheets
      env:
        PARTICLE_ACCESS_TOKEN: ${{ secrets.PARTICLE_ACCESS_TOKEN }}
        GOOGLE_SHEETS_CREDENTIALS: ${{ secrets.GOOGLE_SHEETS_CREDENTIALS }}
        SPREADSHEET_ID: ${{ secrets.SPREADSHEET_ID }}
        SHEET_NAME: ${{ secrets.SHEET_NAME }}
        DEVICE_ID: ${{ secrets.DEVICE_ID }}
        VARIABLE_NAME: ${{ secrets.VARIABLE_NAME }}
      run: |
        cat > collect-data.js << 'EOF'
        const axios = require('axios');
        const { google } = require('googleapis');

        async function main() {
          try {
            console.log('Starting Particle variable collection...');
            
            // Configuration from environment variables
            const config = {
              particleToken: process.env.PARTICLE_ACCESS_TOKEN,
              spreadsheetId: process.env.SPREADSHEET_ID,
              sheetName: process.env.SHEET_NAME || 'Sheet1',
              deviceId: process.env.DEVICE_ID,
              variableName: process.env.VARIABLE_NAME || 'sensorData'
            };

            // Validate required environment variables
            const required = ['particleToken', 'spreadsheetId', 'deviceId'];
            for (const key of required) {
              if (!config[key]) {
                throw new Error(`Missing required environment variable: ${key.toUpperCase()}`);
              }
            }

            console.log(`Fetching variable '${config.variableName}' from device ${config.deviceId}`);

            // Fetch variable from Particle API
            const variableUrl = `https://api.particle.io/v1/devices/${config.deviceId}/${config.variableName}`;
            
            const variableResponse = await axios.get(variableUrl, {
              headers: {
                'Authorization': `Bearer ${config.particleToken}`,
                'Accept': 'application/json'
              },
              timeout: 10000
            });

            console.log('Variable response:', variableResponse.data);

            if (!variableResponse.data || !variableResponse.data.result) {
              console.log('No variable data returned');
              return;
            }

            const variableValue = variableResponse.data.result;
            const timestamp = new Date().toISOString();
            
            console.log(`Variable value: ${variableValue}`);

            // Parse the sensor data (assuming format: temp|||pressure|||humidity)
            const parts = variableValue.split('|||');
            let temperature = 'N/A';
            let pressure = 'N/A';
            let humidity = 'N/A';
            
            if (parts.length >= 3) {
              temperature = parts[0];
              pressure = parts[1];
              humidity = parts[2];
            }

            // Set up Google Sheets API
            const credentials = JSON.parse(process.env.GOOGLE_SHEETS_CREDENTIALS);
            const auth = new google.auth.GoogleAuth({
              credentials: credentials,
              scopes: ['https://www.googleapis.com/auth/spreadsheets']
            });

            const sheets = google.sheets({ version: 'v4', auth });

            // Check for existing data to avoid duplicates
            console.log('Checking for existing data...');
            
            let shouldAddData = true;
            try {
              const existingData = await sheets.spreadsheets.values.get({
                spreadsheetId: config.spreadsheetId,
                range: `${config.sheetName}!A:G`,
              });

              if (existingData.data.values && existingData.data.values.length > 1) {
                // Check the last few rows to see if we already have this exact data
                const recentRows = existingData.data.values.slice(-5); // Check last 5 rows
                
                for (const row of recentRows) {
                  if (row.length >= 4 && row[1] === temperature && row[2] === pressure && row[3] === humidity) {
                    // Check if this data is from within the last hour (to avoid too much duplication)
                    const rowTime = new Date(row[0]);
                    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
                    
                    if (rowTime > oneHourAgo) {
                      console.log('Identical data found in recent entries, skipping...');
                      shouldAddData = false;
                      break;
                    }
                  }
                }
              }
            } catch (error) {
              console.log('Could not check existing data, proceeding anyway:', error.message);
            }

            if (!shouldAddData) {
              console.log('No new data to add');
              return;
            }

            // Check if sheet has headers, add them if not
            try {
              const headerCheck = await sheets.spreadsheets.values.get({
                spreadsheetId: config.spreadsheetId,
                range: `${config.sheetName}!A1:G1`
              });

              if (!headerCheck.data.values || headerCheck.data.values.length === 0) {
                console.log('Adding headers to sheet');
                await sheets.spreadsheets.values.append({
                  spreadsheetId: config.spreadsheetId,
                  range: config.sheetName,
                  valueInputOption: 'RAW',
                  resource: {
                    values: [['Timestamp', 'Temperature (°C)', 'Pressure (hPa)', 'Humidity (%)', 'Raw Data', 'Device ID', 'Collection Time']]
                  }
                });
              }
            } catch (error) {
              console.log('Could not check/add headers, continuing anyway:', error.message);
            }

            // Prepare data row
            const newRow = [
              timestamp,
              temperature,
              pressure, 
              humidity,
              variableValue,
              config.deviceId,
              new Date().toISOString()
            ];

            // Append new data to Google Sheets
            const appendResult = await sheets.spreadsheets.values.append({
              spreadsheetId: config.spreadsheetId,
              range: config.sheetName,
              valueInputOption: 'RAW',
              resource: {
                values: [newRow]
              }
            });

            console.log(`Successfully added new row to Google Sheets`);
            console.log(`Updated range: ${appendResult.data.updates.updatedRange}`);
            console.log(`Data: T=${temperature}°C, P=${pressure}hPa, H=${humidity}%`);

          } catch (error) {
            console.error('Error in main function:', error);
            
            if (error.response) {
              console.error('Response status:', error.response.status);
              console.error('Response data:', error.response.data);
            }
            
            process.exit(1);
          }
        }

        main();
        EOF
        
        node collect-data.js
